//C V1 take too long time

int lengthOfLongestSubstring(char * s){
    int i,j,start=0;
    int len = strlen(s);
    int sub_len = 0, max_len = 0;
    char * sub =(char *) malloc(len);
    memset(sub, len, '\0');

    for(start=0; start<len; start++){
        for(i=start; i<len; i++){
            for(j=0; j<sub_len; j++){
                if(sub[j] == s[i]){
                    if(sub_len >= max_len)
                        max_len = sub_len;

                    if(sub_len > len-sub_len)
                        continue;
                    sub_len=0;
                }
            }

            sub[sub_len] = s[i];
            sub_len++;
        }
        if(sub_len >= max_len){
            max_len = sub_len;
        }
        sub_len = 0;
    }

    free(sub);

    return max_len;
}

//python V1 take too long time
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        slen = len(s)
        tail = 0
        head = 0
        sub_len = 0
        max_len = 0;

        while tail < slen:
            head = tail + 1
            for c in s[head:]:
                if c in s[tail:head]:
                    break
                else:
                    head = head + 1

            sub_len = head - tail
            if sub_len > max_len:
                max_len = sub_len
            tail = tail + 1

        return max_len


// C v2 base python v1
int lengthOfLongestSubstring(char * s){
    int head=0, tail = 0;
    int sub_len=0, max_len = 0;
    int len = strlen(s);
    int i, repeat=0;
    
    while(tail < len){
        head = tail + 1;
        while(head < len){
            for(i=tail; i<head; i++){
                if(s[i] == s[head]){
                    repeat=1;
                    break;
                }
            }
            if(repeat == 1){
                repeat=0;
                break;
            }
            else{
                head++;
            }
            
        }
        
        sub_len = head - tail;
        if(sub_len > max_len){
            max_len = sub_len;
        }
        tail++;
    }


    return max_len;
}

